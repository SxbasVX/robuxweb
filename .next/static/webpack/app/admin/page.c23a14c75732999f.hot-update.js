"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/admin/page",{

/***/ "(app-pages-browser)/./lib/auditLogger.ts":
/*!****************************!*\
  !*** ./lib/auditLogger.ts ***!
  \****************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   auditLog: function() { return /* binding */ auditLog; },\n/* harmony export */   useAuditLogger: function() { return /* binding */ useAuditLogger; }\n/* harmony export */ });\n/* harmony import */ var _supabaseClient__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./supabaseClient */ \"(app-pages-browser)/./lib/supabaseClient.ts\");\n/* harmony import */ var _auth_context__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./auth-context */ \"(app-pages-browser)/./lib/auth-context.tsx\");\n/* __next_internal_client_entry_do_not_use__ useAuditLogger,auditLog,default auto */ \n\nclass AuditLogger {\n    static getInstance() {\n        if (!AuditLogger.instance) {\n            AuditLogger.instance = new AuditLogger();\n        }\n        return AuditLogger.instance;\n    }\n    setUser(user) {\n        this.user = user;\n    }\n    loadLogsFromStorage() {\n        if (false) {}\n        try {\n            const stored = window.localStorage.getItem(\"audit_logs\");\n            if (stored) {\n                this.logs = JSON.parse(stored);\n            }\n        } catch (error) {\n            console.error(\"Error loading logs from storage:\", error);\n        }\n    }\n    saveLogsToStorage() {\n        if (false) {}\n        try {\n            // Mantener solo los últimos 1000 logs\n            const recentLogs = this.logs.slice(-1000);\n            window.localStorage.setItem(\"audit_logs\", JSON.stringify(recentLogs));\n            this.logs = recentLogs;\n        } catch (error) {\n            console.error(\"Error saving logs to storage:\", error);\n        }\n    }\n    async log(action) {\n        let level = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : \"info\", details = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};\n        var _this_user, _this_user1;\n        const logEntry = {\n            id: crypto.randomUUID(),\n            timestamp: new Date().toISOString(),\n            user_id: ((_this_user = this.user) === null || _this_user === void 0 ? void 0 : _this_user.id) || \"anonymous\",\n            user_email: ((_this_user1 = this.user) === null || _this_user1 === void 0 ? void 0 : _this_user1.email) || \"unknown\",\n            action,\n            level,\n            details,\n            ip_address: \"local\",\n            user_agent: navigator.userAgent\n        };\n        // Guardar en localStorage\n        this.logs.push(logEntry);\n        this.saveLogsToStorage();\n        // Guardar SIEMPRE en Supabase\n        try {\n            const supabase = (0,_supabaseClient__WEBPACK_IMPORTED_MODULE_0__.getSupabase)();\n            await supabase.from(\"logs\").insert({\n                id: logEntry.id,\n                timestamp: logEntry.timestamp,\n                user_id: logEntry.user_id,\n                user_email: logEntry.user_email,\n                action: logEntry.action,\n                level: logEntry.level,\n                details: logEntry.details,\n                ip_address: logEntry.ip_address,\n                user_agent: logEntry.user_agent\n            });\n        } catch (error) {\n            // Si falla, mostrar advertencia pero no perder el log local\n            console.warn(\"No se pudo guardar el log en Supabase:\", error);\n        }\n        // Log críticos también en consola\n        if (level === \"critical\" || level === \"error\") {\n            console.error(\"[AUDIT \".concat(level.toUpperCase(), \"]\"), action, details);\n        }\n    }\n    getLogs(filters) {\n        let filtered = [\n            ...this.logs\n        ];\n        if (filters === null || filters === void 0 ? void 0 : filters.level) {\n            filtered = filtered.filter((log)=>log.level === filters.level);\n        }\n        if (filters === null || filters === void 0 ? void 0 : filters.action) {\n            filtered = filtered.filter((log)=>log.action === filters.action);\n        }\n        if (filters === null || filters === void 0 ? void 0 : filters.userId) {\n            filtered = filtered.filter((log)=>log.user_id === filters.userId);\n        }\n        // Ordenar por timestamp descendente\n        filtered.sort((a, b)=>new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime());\n        if (filters === null || filters === void 0 ? void 0 : filters.limit) {\n            filtered = filtered.slice(0, filters.limit);\n        }\n        return filtered;\n    }\n    getStats() {\n        const now = new Date();\n        const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());\n        const thisWeek = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);\n        return {\n            total: this.logs.length,\n            today: this.logs.filter((log)=>new Date(log.timestamp) >= today).length,\n            thisWeek: this.logs.filter((log)=>new Date(log.timestamp) >= thisWeek).length,\n            errors: this.logs.filter((log)=>log.level === \"error\" || log.level === \"critical\").length,\n            byLevel: {\n                info: this.logs.filter((log)=>log.level === \"info\").length,\n                warning: this.logs.filter((log)=>log.level === \"warning\").length,\n                error: this.logs.filter((log)=>log.level === \"error\").length,\n                critical: this.logs.filter((log)=>log.level === \"critical\").length\n            },\n            byAction: this.logs.reduce((acc, log)=>{\n                acc[log.action] = (acc[log.action] || 0) + 1;\n                return acc;\n            }, {})\n        };\n    }\n    clearLogs() {\n        this.logs = [];\n        if (true) {\n            window.localStorage.removeItem(\"audit_logs\");\n        }\n    }\n    exportLogs() {\n        if (false) {}\n        const data = JSON.stringify(this.logs, null, 2);\n        const blob = new Blob([\n            data\n        ], {\n            type: \"application/json\"\n        });\n        const url = URL.createObjectURL(blob);\n        const a = document.createElement(\"a\");\n        a.href = url;\n        a.download = \"audit_logs_\".concat(new Date().toISOString().split(\"T\")[0], \".json\");\n        document.body.appendChild(a);\n        a.click();\n        document.body.removeChild(a);\n        URL.revokeObjectURL(url);\n    }\n    constructor(){\n        this.user = null;\n        this.logs = [];\n        // Cargar logs desde localStorage\n        this.loadLogsFromStorage();\n    }\n}\n// Hook para usar el sistema de logs\nfunction useAuditLogger() {\n    const { user } = (0,_auth_context__WEBPACK_IMPORTED_MODULE_1__.useAuth)();\n    const logger = AuditLogger.getInstance();\n    // Establecer usuario actual\n    if (user) {\n        logger.setUser(user);\n    }\n    return {\n        log: logger.log.bind(logger),\n        getLogs: logger.getLogs.bind(logger),\n        getStats: logger.getStats.bind(logger),\n        clearLogs: logger.clearLogs.bind(logger),\n        exportLogs: logger.exportLogs.bind(logger)\n    };\n}\n// Funciones de conveniencia\nconst auditLog = {\n    userLogin: (userId, email)=>AuditLogger.getInstance().log(\"user_login\", \"info\", {\n            userId,\n            email\n        }),\n    userLogout: (userId)=>AuditLogger.getInstance().log(\"user_logout\", \"info\", {\n            userId\n        }),\n    postCreated: (postId, userId, groupId)=>AuditLogger.getInstance().log(\"post_created\", \"info\", {\n            postId,\n            userId,\n            groupId\n        }),\n    postDeleted: (postId, deletedBy, reason)=>AuditLogger.getInstance().log(\"post_deleted\", \"warning\", {\n            postId,\n            deletedBy,\n            reason\n        }),\n    userDeleted: (deletedUserId, deletedBy, reason)=>AuditLogger.getInstance().log(\"user_deleted\", \"critical\", {\n            deletedUserId,\n            deletedBy,\n            reason\n        }),\n    roleChanged: (userId, oldRole, newRole, changedBy)=>AuditLogger.getInstance().log(\"role_changed\", \"warning\", {\n            userId,\n            oldRole,\n            newRole,\n            changedBy\n        }),\n    backupCreated: (backupId, createdBy)=>AuditLogger.getInstance().log(\"backup_created\", \"info\", {\n            backupId,\n            createdBy\n        }),\n    backupLoaded: (backupId, loadedBy)=>AuditLogger.getInstance().log(\"backup_loaded\", \"warning\", {\n            backupId,\n            loadedBy\n        }),\n    adminAccess: (userId, section)=>AuditLogger.getInstance().log(\"admin_access\", \"info\", {\n            userId,\n            section\n        }),\n    fileUploaded: (fileName, fileSize, userId)=>AuditLogger.getInstance().log(\"file_uploaded\", \"info\", {\n            fileName,\n            fileSize,\n            userId\n        })\n};\n/* harmony default export */ __webpack_exports__[\"default\"] = (AuditLogger);\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/auditLogger.ts\n"));

/***/ })

});